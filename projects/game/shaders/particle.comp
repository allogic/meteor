#version 450 core

struct Particle {
	vec3 position;
	vec3 velocity;
};

layout(push_constant) uniform Dimensions {
	float width;
	float height;
	float depth;
} dimensions;

layout(set = 0, binding = 0) uniform TimeInfo {
	float time;
	float deltaTime;
} timeInfo;

layout(set = 0, binding = 1, std430) readonly buffer InputParticle {
	Particle inputParticles[];
};

layout(set = 0, binding = 2, std430) buffer OutputParticle {
	Particle outputParticles[];
};

layout (local_size_x = 32) in;

void main() {
	uint index = gl_GlobalInvocationID.x;

	Particle inputParticle = inputParticles[index];

	outputParticles[index].position = inputParticle.position + inputParticle.velocity * 0.005;
	outputParticles[index].velocity = inputParticle.velocity;

	float hsx = dimensions.width / 2;
	float hsy = dimensions.height / 2;
	float hsz = dimensions.depth / 2;

	if ((outputParticles[index].position.x <= -hsx) || (outputParticles[index].position.x >= hsx)) {
		outputParticles[index].velocity.x = -outputParticles[index].velocity.x;
	}

	if ((outputParticles[index].position.y <= -hsy) || (outputParticles[index].position.y >= hsy)) {
		outputParticles[index].velocity.y = -outputParticles[index].velocity.y;
	}

	if ((outputParticles[index].position.z <= -hsz) || (outputParticles[index].position.z >= hsz)) {
		outputParticles[index].velocity.z = -outputParticles[index].velocity.z;
	}
}
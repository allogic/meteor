#version 450 core

struct Particle {
	vec4 position;
	vec4 velocity;
};

layout(push_constant) uniform Dimensions {
	float width;
	float height;
	float depth;
	float reserved;
} dimensions;

layout(set = 0, binding = 0) uniform TimeInfo {
	float time;
	float deltaTime;
} timeInfo;

layout(set = 0, binding = 1) uniform ParticleBehaviour {
	float lifetime;
	float reserved0;
	float reserved1;
	float reserved2;
	vec4 velocity;
	vec4 startColor;
	vec4 endColor;
	vec4 startScale;
	vec4 endScale;
} particleBehaviour;

layout(set = 0, binding = 2) readonly buffer InputParticle {
	Particle inputParticles[];
};

layout(set = 0, binding = 3) buffer OutputParticle {
	Particle outputParticles[];
};

layout (local_size_x = 32) in;

void applyForces(in Particle inputParticle, inout Particle outputParticle) {
	vec4 velocity = inputParticle.velocity + particleBehaviour.velocity;

	outputParticle.position = inputParticle.position - velocity;
}

void boundsCheck(inout Particle particle) {
	float hsx = dimensions.width / 2;
	float hsy = dimensions.height / 2;
	float hsz = dimensions.depth / 2;

	if (hsx != 0.0) {
		if ((particle.position.x <= -hsx) || (particle.position.x >= hsx)) {
			particle.position = vec4(0);
		}
	}

	if (hsy != 0.0) {
		if ((particle.position.y <= -hsy) || (particle.position.y >= hsy)) {
			particle.position = vec4(0);
		}
	}

	if (hsz != 0.0) {
		if ((particle.position.z <= -hsz) || (particle.position.z >= hsz)) {
			particle.position = vec4(0);
		}
	}
}

void main() {
	uint index = gl_GlobalInvocationID.x;

	applyForces(inputParticles[index], outputParticles[index]);
	boundsCheck(outputParticles[index]);
}
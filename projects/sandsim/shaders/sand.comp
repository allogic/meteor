#version 450 core

struct Particle {
    vec2 Position;
	vec2 Velocity;
	vec4 Color;
};

layout(binding = 0) uniform TimeInfo {
	float Time;
	float DeltaTime;
} timeInfo;

layout(std430, binding = 1) readonly buffer BufferInputParticle {
	Particle InputParticles[];
};

layout(std430, binding = 2) buffer BufferOutputParticle {
	Particle OutputParticles[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint index = gl_GlobalInvocationID.x;

	Particle inputParticle = InputParticles[index];

	OutputParticles[index].Position = inputParticle.Position + inputParticle.Velocity * timeInfo.DeltaTime;
	OutputParticles[index].Velocity = inputParticle.Velocity;

	if ((OutputParticles[index].Position.x <= -1.0) || (OutputParticles[index].Position.x >= 1.0)) {
		OutputParticles[index].Velocity.x = -OutputParticles[index].Velocity.x;
	}

	if ((OutputParticles[index].Position.y <= -1.0) || (OutputParticles[index].Position.y >= 1.0)) {
		OutputParticles[index].Velocity.y = -OutputParticles[index].Velocity.y;
	}
}